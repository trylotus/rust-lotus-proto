// This file is generated by rust-protobuf 3.5.0. Do not edit
// .proto file is parsed by protoc --rust_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `lotus/evm/transaction.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_0;

// @@protoc_insertion_point(message:lotus.evm.Transaction)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Transaction {
    // message fields
    // @@protoc_insertion_point(field:lotus.evm.Transaction.timestamp)
    pub timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:lotus.evm.Transaction.from_address)
    pub from_address: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:lotus.evm.Transaction.to_address)
    pub to_address: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:lotus.evm.Transaction.value)
    pub value: ::std::string::String,
    // @@protoc_insertion_point(field:lotus.evm.Transaction.gas_price)
    pub gas_price: ::std::string::String,
    // @@protoc_insertion_point(field:lotus.evm.Transaction.gas_limit)
    pub gas_limit: u64,
    // @@protoc_insertion_point(field:lotus.evm.Transaction.data)
    pub data: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:lotus.evm.Transaction.nonce)
    pub nonce: u64,
    // special fields
    // @@protoc_insertion_point(special_field:lotus.evm.Transaction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Transaction {
    fn default() -> &'a Transaction {
        <Transaction as ::protobuf::Message>::default_instance()
    }
}

impl Transaction {
    pub fn new() -> Transaction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "timestamp",
            |m: &Transaction| { &m.timestamp },
            |m: &mut Transaction| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "from_address",
            |m: &Transaction| { &m.from_address },
            |m: &mut Transaction| { &mut m.from_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "to_address",
            |m: &Transaction| { &m.to_address },
            |m: &mut Transaction| { &mut m.to_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &Transaction| { &m.value },
            |m: &mut Transaction| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gas_price",
            |m: &Transaction| { &m.gas_price },
            |m: &mut Transaction| { &mut m.gas_price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gas_limit",
            |m: &Transaction| { &m.gas_limit },
            |m: &mut Transaction| { &mut m.gas_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &Transaction| { &m.data },
            |m: &mut Transaction| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nonce",
            |m: &Transaction| { &m.nonce },
            |m: &mut Transaction| { &mut m.nonce },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Transaction>(
            "Transaction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Transaction {
    const NAME: &'static str = "Transaction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                18 => {
                    self.from_address = is.read_bytes()?;
                },
                26 => {
                    self.to_address = is.read_bytes()?;
                },
                34 => {
                    self.value = is.read_string()?;
                },
                42 => {
                    self.gas_price = is.read_string()?;
                },
                48 => {
                    self.gas_limit = is.read_uint64()?;
                },
                58 => {
                    self.data = is.read_bytes()?;
                },
                64 => {
                    self.nonce = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.from_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.from_address);
        }
        if !self.to_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.to_address);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.value);
        }
        if !self.gas_price.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.gas_price);
        }
        if self.gas_limit != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.gas_limit);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.data);
        }
        if self.nonce != 0 {
            my_size += ::protobuf::rt::uint64_size(8, self.nonce);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.from_address.is_empty() {
            os.write_bytes(2, &self.from_address)?;
        }
        if !self.to_address.is_empty() {
            os.write_bytes(3, &self.to_address)?;
        }
        if !self.value.is_empty() {
            os.write_string(4, &self.value)?;
        }
        if !self.gas_price.is_empty() {
            os.write_string(5, &self.gas_price)?;
        }
        if self.gas_limit != 0 {
            os.write_uint64(6, self.gas_limit)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(7, &self.data)?;
        }
        if self.nonce != 0 {
            os.write_uint64(8, self.nonce)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Transaction {
        Transaction::new()
    }

    fn clear(&mut self) {
        self.timestamp.clear();
        self.from_address.clear();
        self.to_address.clear();
        self.value.clear();
        self.gas_price.clear();
        self.gas_limit = 0;
        self.data.clear();
        self.nonce = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Transaction {
        static instance: Transaction = Transaction {
            timestamp: ::protobuf::MessageField::none(),
            from_address: ::std::vec::Vec::new(),
            to_address: ::std::vec::Vec::new(),
            value: ::std::string::String::new(),
            gas_price: ::std::string::String::new(),
            gas_limit: 0,
            data: ::std::vec::Vec::new(),
            nonce: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Transaction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Transaction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Transaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transaction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1blotus/evm/transaction.proto\x12\tlotus.evm\x1a\x1fgoogle/protobuf/\
    timestamp.proto\x1a\x11lotus/lotus.proto\"\x9f\x02\n\x0bTransaction\x128\
    \n\ttimestamp\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\ttime\
    stamp\x12)\n\x0cfrom_address\x18\x02\x20\x01(\x0cR\x0bfromAddressB\x06\
    \xd2\xab0\x02\x08\x01\x12%\n\nto_address\x18\x03\x20\x01(\x0cR\ttoAddres\
    sB\x06\xd2\xab0\x02\x08\x01\x12\x1a\n\x05value\x18\x04\x20\x01(\tR\x05va\
    lueB\x04\xda\xab0\0\x12!\n\tgas_price\x18\x05\x20\x01(\tR\x08gasPriceB\
    \x04\xda\xab0\0\x12\x1b\n\tgas_limit\x18\x06\x20\x01(\x04R\x08gasLimit\
    \x12\x12\n\x04data\x18\x07\x20\x01(\x0cR\x04data\x12\x14\n\x05nonce\x18\
    \x08\x20\x01(\x04R\x05nonceB(Z&github.com/trylotus/go-lotus-proto/evmJ\
    \x95\x05\n\x06\x12\x04\0\0\x12\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\
    \n\x01\x02\x12\x03\x02\0\x12\n\t\n\x02\x03\0\x12\x03\x04\0)\n\t\n\x02\
    \x03\x01\x12\x03\x05\0\x1b\n\x08\n\x01\x08\x12\x03\x07\0=\n\t\n\x02\x08\
    \x0b\x12\x03\x07\0=\n\n\n\x02\x04\0\x12\x04\t\0\x12\x01\n\n\n\x03\x04\0\
    \x01\x12\x03\t\x08\x13\n\x0b\n\x04\x04\0\x02\0\x12\x03\n\x02*\n\x0c\n\
    \x05\x04\0\x02\0\x06\x12\x03\n\x02\x1b\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\n\x1c%\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\n()\n\x0b\n\x04\x04\0\
    \x02\x01\x12\x03\x0b\x02B\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0b\x02\
    \x07\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0b\x08\x14\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x0b\x17\x18\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\
    \x0b\x19A\n\x10\n\t\x04\0\x02\x01\x08\xba\x85\x06\x01\x12\x03\x0b\x1a@\n\
    \x0b\n\x04\x04\0\x02\x02\x12\x03\x0c\x02@\n\x0c\n\x05\x04\0\x02\x02\x05\
    \x12\x03\x0c\x02\x07\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0c\x08\x12\n\
    \x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0c\x15\x16\n\x0c\n\x05\x04\0\x02\
    \x02\x08\x12\x03\x0c\x17?\n\x10\n\t\x04\0\x02\x02\x08\xba\x85\x06\x01\
    \x12\x03\x0c\x18>\n\x0b\n\x04\x04\0\x02\x03\x12\x03\r\x02*\n\x0c\n\x05\
    \x04\0\x02\x03\x05\x12\x03\r\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\
    \x03\r\t\x0e\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\r\x11\x12\n\x0c\n\x05\
    \x04\0\x02\x03\x08\x12\x03\r\x13)\n\x0f\n\x08\x04\0\x02\x03\x08\xbb\x85\
    \x06\x12\x03\r\x14(\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x0e\x02.\n\x0c\n\
    \x05\x04\0\x02\x04\x05\x12\x03\x0e\x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\
    \x12\x03\x0e\t\x12\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x0e\x15\x16\n\
    \x0c\n\x05\x04\0\x02\x04\x08\x12\x03\x0e\x17-\n\x0f\n\x08\x04\0\x02\x04\
    \x08\xbb\x85\x06\x12\x03\x0e\x18,\n\x0b\n\x04\x04\0\x02\x05\x12\x03\x0f\
    \x02\x17\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x0f\x02\x08\n\x0c\n\x05\
    \x04\0\x02\x05\x01\x12\x03\x0f\t\x12\n\x0c\n\x05\x04\0\x02\x05\x03\x12\
    \x03\x0f\x15\x16\n\x0b\n\x04\x04\0\x02\x06\x12\x03\x10\x02\x11\n\x0c\n\
    \x05\x04\0\x02\x06\x05\x12\x03\x10\x02\x07\n\x0c\n\x05\x04\0\x02\x06\x01\
    \x12\x03\x10\x08\x0c\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x10\x0f\x10\n\
    \x0b\n\x04\x04\0\x02\x07\x12\x03\x11\x02\x13\n\x0c\n\x05\x04\0\x02\x07\
    \x05\x12\x03\x11\x02\x08\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\x11\t\x0e\
    \n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x11\x11\x12b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(super::lotus::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Transaction::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
