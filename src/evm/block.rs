// This file is generated by rust-protobuf 3.5.0. Do not edit
// .proto file is parsed by protoc --rust_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `lotus/evm/block.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_0;

// @@protoc_insertion_point(message:lotus.evm.Block)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Block {
    // message fields
    // @@protoc_insertion_point(field:lotus.evm.Block.timestamp)
    pub timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:lotus.evm.Block.block_number)
    pub block_number: u64,
    // @@protoc_insertion_point(field:lotus.evm.Block.block_hash)
    pub block_hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:lotus.evm.Block.parent_hash)
    pub parent_hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:lotus.evm.Block.transactions)
    pub transactions: ::std::vec::Vec<super::transaction::Transaction>,
    // special fields
    // @@protoc_insertion_point(special_field:lotus.evm.Block.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Block {
    fn default() -> &'a Block {
        <Block as ::protobuf::Message>::default_instance()
    }
}

impl Block {
    pub fn new() -> Block {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "timestamp",
            |m: &Block| { &m.timestamp },
            |m: &mut Block| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "block_number",
            |m: &Block| { &m.block_number },
            |m: &mut Block| { &mut m.block_number },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "block_hash",
            |m: &Block| { &m.block_hash },
            |m: &mut Block| { &mut m.block_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "parent_hash",
            |m: &Block| { &m.parent_hash },
            |m: &mut Block| { &mut m.parent_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "transactions",
            |m: &Block| { &m.transactions },
            |m: &mut Block| { &mut m.transactions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Block>(
            "Block",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Block {
    const NAME: &'static str = "Block";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                16 => {
                    self.block_number = is.read_uint64()?;
                },
                26 => {
                    self.block_hash = is.read_bytes()?;
                },
                34 => {
                    self.parent_hash = is.read_bytes()?;
                },
                42 => {
                    self.transactions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.block_number != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.block_number);
        }
        if !self.block_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.block_hash);
        }
        if !self.parent_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.parent_hash);
        }
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.block_number != 0 {
            os.write_uint64(2, self.block_number)?;
        }
        if !self.block_hash.is_empty() {
            os.write_bytes(3, &self.block_hash)?;
        }
        if !self.parent_hash.is_empty() {
            os.write_bytes(4, &self.parent_hash)?;
        }
        for v in &self.transactions {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Block {
        Block::new()
    }

    fn clear(&mut self) {
        self.timestamp.clear();
        self.block_number = 0;
        self.block_hash.clear();
        self.parent_hash.clear();
        self.transactions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Block {
        static instance: Block = Block {
            timestamp: ::protobuf::MessageField::none(),
            block_number: 0,
            block_hash: ::std::vec::Vec::new(),
            parent_hash: ::std::vec::Vec::new(),
            transactions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Block {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Block").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Block {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Block {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15lotus/evm/block.proto\x12\tlotus.evm\x1a\x1fgoogle/protobuf/timest\
    amp.proto\x1a\x1blotus/evm/transaction.proto\"\xe0\x01\n\x05Block\x128\n\
    \ttimestamp\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\ttimest\
    amp\x12!\n\x0cblock_number\x18\x02\x20\x01(\x04R\x0bblockNumber\x12\x1d\
    \n\nblock_hash\x18\x03\x20\x01(\x0cR\tblockHash\x12\x1f\n\x0bparent_hash\
    \x18\x04\x20\x01(\x0cR\nparentHash\x12:\n\x0ctransactions\x18\x05\x20\
    \x03(\x0b2\x16.lotus.evm.TransactionR\x0ctransactionsB(Z&github.com/tryl\
    otus/go-lotus-proto/evmJ\x80\x03\n\x06\x12\x04\0\0\x0f\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x12\n\t\n\x02\x03\0\
    \x12\x03\x04\0)\n\t\n\x02\x03\x01\x12\x03\x05\0%\n\x08\n\x01\x08\x12\x03\
    \x07\0=\n\t\n\x02\x08\x0b\x12\x03\x07\0=\n\n\n\x02\x04\0\x12\x04\t\0\x0f\
    \x01\n\n\n\x03\x04\0\x01\x12\x03\t\x08\r\n\x0b\n\x04\x04\0\x02\0\x12\x03\
    \n\x02*\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\n\x02\x1b\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\n\x1c%\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\n()\n\x0b\
    \n\x04\x04\0\x02\x01\x12\x03\x0b\x02\x1a\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03\x0b\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0b\t\x15\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0b\x18\x19\n\x0b\n\x04\x04\0\x02\
    \x02\x12\x03\x0c\x02\x17\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0c\x02\
    \x07\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0c\x08\x12\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x03\x0c\x15\x16\n\x0b\n\x04\x04\0\x02\x03\x12\x03\r\x02\
    \x18\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\r\x02\x07\n\x0c\n\x05\x04\0\
    \x02\x03\x01\x12\x03\r\x08\x13\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\r\
    \x16\x17\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x0e\x02(\n\x0c\n\x05\x04\0\
    \x02\x04\x04\x12\x03\x0e\x02\n\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03\x0e\
    \x0b\x16\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x0e\x17#\n\x0c\n\x05\x04\
    \0\x02\x04\x03\x12\x03\x0e&'b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(super::transaction::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Block::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
