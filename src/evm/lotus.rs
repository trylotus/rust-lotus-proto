// This file is generated by rust-protobuf 3.5.0. Do not edit
// .proto file is parsed by protoc --rust_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `lotus/lotus.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_0;

///  Defines options for indexing a field.
// @@protoc_insertion_point(message:lotus.IndexOption)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct IndexOption {
    // message fields
    ///  Type of index (default to ordered).
    // @@protoc_insertion_point(field:lotus.IndexOption.type)
    pub type_: ::protobuf::EnumOrUnknown<IndexType>,
    ///  Whether this is a unique index (default to false).
    // @@protoc_insertion_point(field:lotus.IndexOption.unique)
    pub unique: bool,
    // special fields
    // @@protoc_insertion_point(special_field:lotus.IndexOption.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IndexOption {
    fn default() -> &'a IndexOption {
        <IndexOption as ::protobuf::Message>::default_instance()
    }
}

impl IndexOption {
    pub fn new() -> IndexOption {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &IndexOption| { &m.type_ },
            |m: &mut IndexOption| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "unique",
            |m: &IndexOption| { &m.unique },
            |m: &mut IndexOption| { &mut m.unique },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IndexOption>(
            "IndexOption",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IndexOption {
    const NAME: &'static str = "IndexOption";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.unique = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(IndexType::INDEX_TYPE_ORDERED) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if self.unique != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(IndexType::INDEX_TYPE_ORDERED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.unique != false {
            os.write_bool(2, self.unique)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IndexOption {
        IndexOption::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(IndexType::INDEX_TYPE_ORDERED);
        self.unique = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IndexOption {
        static instance: IndexOption = IndexOption {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            unique: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IndexOption {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IndexOption").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IndexOption {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IndexOption {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Defines options for indexing multiple fields.
// @@protoc_insertion_point(message:lotus.CompositeIndexesOption)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CompositeIndexesOption {
    // message fields
    ///  List of composite indexes.
    // @@protoc_insertion_point(field:lotus.CompositeIndexesOption.index)
    pub index: ::std::vec::Vec<CompositeIndexOption>,
    // special fields
    // @@protoc_insertion_point(special_field:lotus.CompositeIndexesOption.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CompositeIndexesOption {
    fn default() -> &'a CompositeIndexesOption {
        <CompositeIndexesOption as ::protobuf::Message>::default_instance()
    }
}

impl CompositeIndexesOption {
    pub fn new() -> CompositeIndexesOption {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "index",
            |m: &CompositeIndexesOption| { &m.index },
            |m: &mut CompositeIndexesOption| { &mut m.index },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CompositeIndexesOption>(
            "CompositeIndexesOption",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CompositeIndexesOption {
    const NAME: &'static str = "CompositeIndexesOption";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.index.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.index {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.index {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CompositeIndexesOption {
        CompositeIndexesOption::new()
    }

    fn clear(&mut self) {
        self.index.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CompositeIndexesOption {
        static instance: CompositeIndexesOption = CompositeIndexesOption {
            index: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CompositeIndexesOption {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CompositeIndexesOption").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CompositeIndexesOption {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompositeIndexesOption {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Defines options for composite indexes involving multiple fields.
// @@protoc_insertion_point(message:lotus.CompositeIndexOption)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CompositeIndexOption {
    // message fields
    ///  Type of composite index (default to ordered).
    // @@protoc_insertion_point(field:lotus.CompositeIndexOption.type)
    pub type_: ::protobuf::EnumOrUnknown<IndexType>,
    ///  Whether this is a unique index (default to false).
    // @@protoc_insertion_point(field:lotus.CompositeIndexOption.unique)
    pub unique: bool,
    ///  List of field names involved in the composite index.
    // @@protoc_insertion_point(field:lotus.CompositeIndexOption.fields)
    pub fields: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:lotus.CompositeIndexOption.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CompositeIndexOption {
    fn default() -> &'a CompositeIndexOption {
        <CompositeIndexOption as ::protobuf::Message>::default_instance()
    }
}

impl CompositeIndexOption {
    pub fn new() -> CompositeIndexOption {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &CompositeIndexOption| { &m.type_ },
            |m: &mut CompositeIndexOption| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "unique",
            |m: &CompositeIndexOption| { &m.unique },
            |m: &mut CompositeIndexOption| { &mut m.unique },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "fields",
            |m: &CompositeIndexOption| { &m.fields },
            |m: &mut CompositeIndexOption| { &mut m.fields },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CompositeIndexOption>(
            "CompositeIndexOption",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CompositeIndexOption {
    const NAME: &'static str = "CompositeIndexOption";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                16 => {
                    self.unique = is.read_bool()?;
                },
                26 => {
                    self.fields.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.type_ != ::protobuf::EnumOrUnknown::new(IndexType::INDEX_TYPE_ORDERED) {
            my_size += ::protobuf::rt::int32_size(1, self.type_.value());
        }
        if self.unique != false {
            my_size += 1 + 1;
        }
        for value in &self.fields {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.type_ != ::protobuf::EnumOrUnknown::new(IndexType::INDEX_TYPE_ORDERED) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if self.unique != false {
            os.write_bool(2, self.unique)?;
        }
        for v in &self.fields {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CompositeIndexOption {
        CompositeIndexOption::new()
    }

    fn clear(&mut self) {
        self.type_ = ::protobuf::EnumOrUnknown::new(IndexType::INDEX_TYPE_ORDERED);
        self.unique = false;
        self.fields.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CompositeIndexOption {
        static instance: CompositeIndexOption = CompositeIndexOption {
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            unique: false,
            fields: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CompositeIndexOption {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CompositeIndexOption").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CompositeIndexOption {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompositeIndexOption {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Defines options for how bytes fields are encoded/decoded.
// @@protoc_insertion_point(message:lotus.BytesOption)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BytesOption {
    // message fields
    ///  Format to use for displaying binary data (default to base64).
    // @@protoc_insertion_point(field:lotus.BytesOption.format)
    pub format: ::protobuf::EnumOrUnknown<FormatType>,
    // special fields
    // @@protoc_insertion_point(special_field:lotus.BytesOption.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BytesOption {
    fn default() -> &'a BytesOption {
        <BytesOption as ::protobuf::Message>::default_instance()
    }
}

impl BytesOption {
    pub fn new() -> BytesOption {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "format",
            |m: &BytesOption| { &m.format },
            |m: &mut BytesOption| { &mut m.format },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BytesOption>(
            "BytesOption",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BytesOption {
    const NAME: &'static str = "BytesOption";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.format = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.format != ::protobuf::EnumOrUnknown::new(FormatType::FORMAT_TYPE_BASE64) {
            my_size += ::protobuf::rt::int32_size(1, self.format.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.format != ::protobuf::EnumOrUnknown::new(FormatType::FORMAT_TYPE_BASE64) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.format))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BytesOption {
        BytesOption::new()
    }

    fn clear(&mut self) {
        self.format = ::protobuf::EnumOrUnknown::new(FormatType::FORMAT_TYPE_BASE64);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BytesOption {
        static instance: BytesOption = BytesOption {
            format: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BytesOption {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BytesOption").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BytesOption {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BytesOption {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Defines options for how numeric fields are scaled/represented.
// @@protoc_insertion_point(message:lotus.NumericOption)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct NumericOption {
    // message fields
    ///  Total number of significant digits (including decimals).
    // @@protoc_insertion_point(field:lotus.NumericOption.precision)
    pub precision: ::std::option::Option<u32>,
    ///  Number of decimal places (0 for integers).
    // @@protoc_insertion_point(field:lotus.NumericOption.scale)
    pub scale: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:lotus.NumericOption.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NumericOption {
    fn default() -> &'a NumericOption {
        <NumericOption as ::protobuf::Message>::default_instance()
    }
}

impl NumericOption {
    pub fn new() -> NumericOption {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "precision",
            |m: &NumericOption| { &m.precision },
            |m: &mut NumericOption| { &mut m.precision },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "scale",
            |m: &NumericOption| { &m.scale },
            |m: &mut NumericOption| { &mut m.scale },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NumericOption>(
            "NumericOption",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NumericOption {
    const NAME: &'static str = "NumericOption";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.precision = ::std::option::Option::Some(is.read_uint32()?);
                },
                16 => {
                    self.scale = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.precision {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.scale {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.precision {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.scale {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NumericOption {
        NumericOption::new()
    }

    fn clear(&mut self) {
        self.precision = ::std::option::Option::None;
        self.scale = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NumericOption {
        static instance: NumericOption = NumericOption {
            precision: ::std::option::Option::None,
            scale: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NumericOption {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NumericOption").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NumericOption {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NumericOption {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Defines options for aggregating data from another message.
// @@protoc_insertion_point(message:lotus.ViewOption)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ViewOption {
    // message fields
    ///  Topic that is aggregated from.
    // @@protoc_insertion_point(field:lotus.ViewOption.topic)
    pub topic: ::std::string::String,
    ///  Whether this is a materialized view (default to false).
    // @@protoc_insertion_point(field:lotus.ViewOption.materialized)
    pub materialized: bool,
    ///  Whether to enable realtime aggregation (default to false).
    // @@protoc_insertion_point(field:lotus.ViewOption.realtime)
    pub realtime: bool,
    ///  Time interval to refresh materialized view.
    // @@protoc_insertion_point(field:lotus.ViewOption.refresh_interval)
    pub refresh_interval: ::std::string::String,
    ///  View options.
    // @@protoc_insertion_point(field:lotus.ViewOption.options)
    pub options: ::std::vec::Vec<::std::string::String>,
    ///  List of field names used for aggregation.
    // @@protoc_insertion_point(field:lotus.ViewOption.group_by)
    pub group_by: ::std::vec::Vec<::std::string::String>,
    ///  Where condition applied to the aggregation.
    // @@protoc_insertion_point(field:lotus.ViewOption.where)
    pub where_: ::std::string::String,
    ///  Having condition applied to the aggregation.
    // @@protoc_insertion_point(field:lotus.ViewOption.having)
    pub having: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:lotus.ViewOption.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ViewOption {
    fn default() -> &'a ViewOption {
        <ViewOption as ::protobuf::Message>::default_instance()
    }
}

impl ViewOption {
    pub fn new() -> ViewOption {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "topic",
            |m: &ViewOption| { &m.topic },
            |m: &mut ViewOption| { &mut m.topic },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "materialized",
            |m: &ViewOption| { &m.materialized },
            |m: &mut ViewOption| { &mut m.materialized },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "realtime",
            |m: &ViewOption| { &m.realtime },
            |m: &mut ViewOption| { &mut m.realtime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "refresh_interval",
            |m: &ViewOption| { &m.refresh_interval },
            |m: &mut ViewOption| { &mut m.refresh_interval },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "options",
            |m: &ViewOption| { &m.options },
            |m: &mut ViewOption| { &mut m.options },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "group_by",
            |m: &ViewOption| { &m.group_by },
            |m: &mut ViewOption| { &mut m.group_by },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "where",
            |m: &ViewOption| { &m.where_ },
            |m: &mut ViewOption| { &mut m.where_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "having",
            |m: &ViewOption| { &m.having },
            |m: &mut ViewOption| { &mut m.having },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ViewOption>(
            "ViewOption",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ViewOption {
    const NAME: &'static str = "ViewOption";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.topic = is.read_string()?;
                },
                16 => {
                    self.materialized = is.read_bool()?;
                },
                24 => {
                    self.realtime = is.read_bool()?;
                },
                34 => {
                    self.refresh_interval = is.read_string()?;
                },
                42 => {
                    self.options.push(is.read_string()?);
                },
                50 => {
                    self.group_by.push(is.read_string()?);
                },
                58 => {
                    self.where_ = is.read_string()?;
                },
                66 => {
                    self.having = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.topic.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.topic);
        }
        if self.materialized != false {
            my_size += 1 + 1;
        }
        if self.realtime != false {
            my_size += 1 + 1;
        }
        if !self.refresh_interval.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.refresh_interval);
        }
        for value in &self.options {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        for value in &self.group_by {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        if !self.where_.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.where_);
        }
        if !self.having.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.having);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.topic.is_empty() {
            os.write_string(1, &self.topic)?;
        }
        if self.materialized != false {
            os.write_bool(2, self.materialized)?;
        }
        if self.realtime != false {
            os.write_bool(3, self.realtime)?;
        }
        if !self.refresh_interval.is_empty() {
            os.write_string(4, &self.refresh_interval)?;
        }
        for v in &self.options {
            os.write_string(5, &v)?;
        };
        for v in &self.group_by {
            os.write_string(6, &v)?;
        };
        if !self.where_.is_empty() {
            os.write_string(7, &self.where_)?;
        }
        if !self.having.is_empty() {
            os.write_string(8, &self.having)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ViewOption {
        ViewOption::new()
    }

    fn clear(&mut self) {
        self.topic.clear();
        self.materialized = false;
        self.realtime = false;
        self.refresh_interval.clear();
        self.options.clear();
        self.group_by.clear();
        self.where_.clear();
        self.having.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ViewOption {
        static instance: ViewOption = ViewOption {
            topic: ::std::string::String::new(),
            materialized: false,
            realtime: false,
            refresh_interval: ::std::string::String::new(),
            options: ::std::vec::Vec::new(),
            group_by: ::std::vec::Vec::new(),
            where_: ::std::string::String::new(),
            having: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ViewOption {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ViewOption").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ViewOption {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ViewOption {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Specifies the type of index.
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:lotus.IndexType)
pub enum IndexType {
    // @@protoc_insertion_point(enum_value:lotus.IndexType.INDEX_TYPE_ORDERED)
    INDEX_TYPE_ORDERED = 0,
    // @@protoc_insertion_point(enum_value:lotus.IndexType.INDEX_TYPE_UNORDERED)
    INDEX_TYPE_UNORDERED = 1,
}

impl ::protobuf::Enum for IndexType {
    const NAME: &'static str = "IndexType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<IndexType> {
        match value {
            0 => ::std::option::Option::Some(IndexType::INDEX_TYPE_ORDERED),
            1 => ::std::option::Option::Some(IndexType::INDEX_TYPE_UNORDERED),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<IndexType> {
        match str {
            "INDEX_TYPE_ORDERED" => ::std::option::Option::Some(IndexType::INDEX_TYPE_ORDERED),
            "INDEX_TYPE_UNORDERED" => ::std::option::Option::Some(IndexType::INDEX_TYPE_UNORDERED),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [IndexType] = &[
        IndexType::INDEX_TYPE_ORDERED,
        IndexType::INDEX_TYPE_UNORDERED,
    ];
}

impl ::protobuf::EnumFull for IndexType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("IndexType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for IndexType {
    fn default() -> Self {
        IndexType::INDEX_TYPE_ORDERED
    }
}

impl IndexType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<IndexType>("IndexType")
    }
}

///  Specifies the format for encoding/decoding bytes data.
#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:lotus.FormatType)
pub enum FormatType {
    // @@protoc_insertion_point(enum_value:lotus.FormatType.FORMAT_TYPE_BASE64)
    FORMAT_TYPE_BASE64 = 0,
    // @@protoc_insertion_point(enum_value:lotus.FormatType.FORMAT_TYPE_HEX)
    FORMAT_TYPE_HEX = 1,
}

impl ::protobuf::Enum for FormatType {
    const NAME: &'static str = "FormatType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FormatType> {
        match value {
            0 => ::std::option::Option::Some(FormatType::FORMAT_TYPE_BASE64),
            1 => ::std::option::Option::Some(FormatType::FORMAT_TYPE_HEX),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<FormatType> {
        match str {
            "FORMAT_TYPE_BASE64" => ::std::option::Option::Some(FormatType::FORMAT_TYPE_BASE64),
            "FORMAT_TYPE_HEX" => ::std::option::Option::Some(FormatType::FORMAT_TYPE_HEX),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [FormatType] = &[
        FormatType::FORMAT_TYPE_BASE64,
        FormatType::FORMAT_TYPE_HEX,
    ];
}

impl ::protobuf::EnumFull for FormatType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("FormatType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for FormatType {
    fn default() -> Self {
        FormatType::FORMAT_TYPE_BASE64
    }
}

impl FormatType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<FormatType>("FormatType")
    }
}

/// Extension fields
pub mod exts {

    pub const composite: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, super::CompositeIndexesOption> = ::protobuf::ext::ExtFieldOptional::new(99001, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_MESSAGE);

    pub const view: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, super::ViewOption> = ::protobuf::ext::ExtFieldOptional::new(99002, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_MESSAGE);

    pub const index: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, super::IndexOption> = ::protobuf::ext::ExtFieldOptional::new(99001, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_MESSAGE);

    pub const bytes: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, super::BytesOption> = ::protobuf::ext::ExtFieldOptional::new(99002, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_MESSAGE);

    pub const numeric: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, super::NumericOption> = ::protobuf::ext::ExtFieldOptional::new(99003, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_MESSAGE);

    pub const projection: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, ::std::string::String> = ::protobuf::ext::ExtFieldOptional::new(99004, ::protobuf::descriptor::field_descriptor_proto::Type::TYPE_STRING);
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11lotus/lotus.proto\x12\x05lotus\x1a\x20google/protobuf/descriptor.p\
    roto\"K\n\x0bIndexOption\x12$\n\x04type\x18\x01\x20\x01(\x0e2\x10.lotus.\
    IndexTypeR\x04type\x12\x16\n\x06unique\x18\x02\x20\x01(\x08R\x06unique\"\
    K\n\x16CompositeIndexesOption\x121\n\x05index\x18\x01\x20\x03(\x0b2\x1b.\
    lotus.CompositeIndexOptionR\x05index\"l\n\x14CompositeIndexOption\x12$\n\
    \x04type\x18\x01\x20\x01(\x0e2\x10.lotus.IndexTypeR\x04type\x12\x16\n\
    \x06unique\x18\x02\x20\x01(\x08R\x06unique\x12\x16\n\x06fields\x18\x03\
    \x20\x03(\tR\x06fields\"8\n\x0bBytesOption\x12)\n\x06format\x18\x01\x20\
    \x01(\x0e2\x11.lotus.FormatTypeR\x06format\"e\n\rNumericOption\x12!\n\tp\
    recision\x18\x01\x20\x01(\rH\0R\tprecision\x88\x01\x01\x12\x19\n\x05scal\
    e\x18\x02\x20\x01(\rH\x01R\x05scale\x88\x01\x01B\x0c\n\n_precisionB\x08\
    \n\x06_scale\"\xf0\x01\n\nViewOption\x12\x14\n\x05topic\x18\x01\x20\x01(\
    \tR\x05topic\x12\"\n\x0cmaterialized\x18\x02\x20\x01(\x08R\x0cmaterializ\
    ed\x12\x1a\n\x08realtime\x18\x03\x20\x01(\x08R\x08realtime\x12)\n\x10ref\
    resh_interval\x18\x04\x20\x01(\tR\x0frefreshInterval\x12\x18\n\x07option\
    s\x18\x05\x20\x03(\tR\x07options\x12\x19\n\x08group_by\x18\x06\x20\x03(\
    \tR\x07groupBy\x12\x14\n\x05where\x18\x07\x20\x01(\tR\x05where\x12\x16\n\
    \x06having\x18\x08\x20\x01(\tR\x06having*=\n\tIndexType\x12\x16\n\x12IND\
    EX_TYPE_ORDERED\x10\0\x12\x18\n\x14INDEX_TYPE_UNORDERED\x10\x01*9\n\nFor\
    matType\x12\x16\n\x12FORMAT_TYPE_BASE64\x10\0\x12\x13\n\x0fFORMAT_TYPE_H\
    EX\x10\x01:a\n\tcomposite\x18\xb9\x85\x06\x20\x01(\x0b2\x1d.lotus.Compos\
    iteIndexesOption\x12\x1f.google.protobuf.MessageOptionsR\tcomposite\x88\
    \x01\x01:K\n\x04view\x18\xba\x85\x06\x20\x01(\x0b2\x11.lotus.ViewOption\
    \x12\x1f.google.protobuf.MessageOptionsR\x04view\x88\x01\x01:L\n\x05inde\
    x\x18\xb9\x85\x06\x20\x01(\x0b2\x12.lotus.IndexOption\x12\x1d.google.pro\
    tobuf.FieldOptionsR\x05index\x88\x01\x01:L\n\x05bytes\x18\xba\x85\x06\
    \x20\x01(\x0b2\x12.lotus.BytesOption\x12\x1d.google.protobuf.FieldOption\
    sR\x05bytes\x88\x01\x01:R\n\x07numeric\x18\xbb\x85\x06\x20\x01(\x0b2\x14\
    .lotus.NumericOption\x12\x1d.google.protobuf.FieldOptionsR\x07numeric\
    \x88\x01\x01:B\n\nprojection\x18\xbc\x85\x06\x20\x01(\t\x12\x1d.google.p\
    rotobuf.FieldOptionsR\nprojection\x88\x01\x01B*Z(github.com/trylotus/go-\
    lotus-proto;lotusJ\xa4\x1d\n\x06\x12\x04\0\0d\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x0e\n\t\n\x02\x03\0\x12\x03\
    \x04\0*\n\x08\n\x01\x08\x12\x03\x06\0?\n\t\n\x02\x08\x0b\x12\x03\x06\0?\
    \nN\n\x01\x07\x12\x04\t\0\x0e\x01\x1aC\x20This\x20extension\x20allows\
    \x20adding\x20options\x20to\x20protocol\x20buffer\x20messages.\n\nD\n\
    \x02\x07\0\x12\x03\x0b\x024\x1a9\x20Option\x20to\x20specify\x20composite\
    \x20indexes\x20on\x20multiple\x20fields.\n\n\n\n\x03\x07\0\x02\x12\x03\t\
    \x07%\n\n\n\x03\x07\0\x04\x12\x03\x0b\x02\n\n\n\n\x03\x07\0\x06\x12\x03\
    \x0b\x0b!\n\n\n\x03\x07\0\x01\x12\x03\x0b\"+\n\n\n\x03\x07\0\x03\x12\x03\
    \x0b.3\nF\n\x02\x07\x01\x12\x03\r\x02#\x1a;\x20Option\x20to\x20specify\
    \x20a\x20view\x20aggregated\x20from\x20another\x20message.\n\n\n\n\x03\
    \x07\x01\x02\x12\x03\t\x07%\n\n\n\x03\x07\x01\x04\x12\x03\r\x02\n\n\n\n\
    \x03\x07\x01\x06\x12\x03\r\x0b\x15\n\n\n\x03\x07\x01\x01\x12\x03\r\x16\
    \x1a\n\n\n\x03\x07\x01\x03\x12\x03\r\x1d\"\nL\n\x01\x07\x12\x04\x11\0\
    \x1a\x01\x1aA\x20This\x20extension\x20allows\x20adding\x20options\x20to\
    \x20protocol\x20buffer\x20fields.\n\n/\n\x02\x07\x02\x12\x03\x13\x02%\
    \x1a$\x20Option\x20to\x20mark\x20a\x20field\x20as\x20indexed.\n\n\n\n\
    \x03\x07\x02\x02\x12\x03\x11\x07#\n\n\n\x03\x07\x02\x04\x12\x03\x13\x02\
    \n\n\n\n\x03\x07\x02\x06\x12\x03\x13\x0b\x16\n\n\n\x03\x07\x02\x01\x12\
    \x03\x13\x17\x1c\n\n\n\x03\x07\x02\x03\x12\x03\x13\x1f$\nD\n\x02\x07\x03\
    \x12\x03\x15\x02%\x1a9\x20Option\x20to\x20specify\x20how\x20bytes\x20fie\
    lds\x20are\x20encoded/decoded.\n\n\n\n\x03\x07\x03\x02\x12\x03\x11\x07#\
    \n\n\n\x03\x07\x03\x04\x12\x03\x15\x02\n\n\n\n\x03\x07\x03\x06\x12\x03\
    \x15\x0b\x16\n\n\n\x03\x07\x03\x01\x12\x03\x15\x17\x1c\n\n\n\x03\x07\x03\
    \x03\x12\x03\x15\x1f$\nI\n\x02\x07\x04\x12\x03\x17\x02)\x1a>\x20Option\
    \x20to\x20specify\x20how\x20numeric\x20fields\x20are\x20scaled/represent\
    ed.\n\n\n\n\x03\x07\x04\x02\x12\x03\x11\x07#\n\n\n\x03\x07\x04\x04\x12\
    \x03\x17\x02\n\n\n\n\x03\x07\x04\x06\x12\x03\x17\x0b\x18\n\n\n\x03\x07\
    \x04\x01\x12\x03\x17\x19\x20\n\n\n\x03\x07\x04\x03\x12\x03\x17#(\nM\n\
    \x02\x07\x05\x12\x03\x19\x02%\x1aB\x20Option\x20to\x20define\x20a\x20cal\
    culated\x20field,\x20computed\x20from\x20other\x20fields.\n\n\n\n\x03\
    \x07\x05\x02\x12\x03\x11\x07#\n\n\n\x03\x07\x05\x04\x12\x03\x19\x02\n\n\
    \n\n\x03\x07\x05\x05\x12\x03\x19\x0b\x11\n\n\n\x03\x07\x05\x01\x12\x03\
    \x19\x12\x1c\n\n\n\x03\x07\x05\x03\x12\x03\x19\x1f$\n*\n\x02\x05\0\x12\
    \x04\x1d\0\"\x01\x1a\x1e\x20Specifies\x20the\x20type\x20of\x20index.\n\n\
    \n\n\x03\x05\0\x01\x12\x03\x1d\x05\x0e\n/\n\x04\x05\0\x02\0\x12\x03\x1f\
    \x02\x19\x1a\"\x20Ordered\x20index\x20(maintains\x20order).\n\n\x0c\n\
    \x05\x05\0\x02\0\x01\x12\x03\x1f\x02\x14\n\x0c\n\x05\x05\0\x02\0\x02\x12\
    \x03\x1f\x17\x18\n4\n\x04\x05\0\x02\x01\x12\x03!\x02\x1b\x1a'\x20Unorder\
    ed\x20index\x20(faster\x20for\x20lookups).\n\n\x0c\n\x05\x05\0\x02\x01\
    \x01\x12\x03!\x02\x16\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03!\x19\x1a\n3\
    \n\x02\x04\0\x12\x04%\0*\x01\x1a'\x20Defines\x20options\x20for\x20indexi\
    ng\x20a\x20field.\n\n\n\n\x03\x04\0\x01\x12\x03%\x08\x13\n2\n\x04\x04\0\
    \x02\0\x12\x03'\x02\x15\x1a%\x20Type\x20of\x20index\x20(default\x20to\
    \x20ordered).\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03'\x02\x0b\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03'\x0c\x10\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03'\
    \x13\x14\nA\n\x04\x04\0\x02\x01\x12\x03)\x02\x12\x1a4\x20Whether\x20this\
    \x20is\x20a\x20unique\x20index\x20(default\x20to\x20false).\n\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03)\x02\x06\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03)\x07\r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03)\x10\x11\n;\n\x02\
    \x04\x01\x12\x04-\00\x01\x1a/\x20Defines\x20options\x20for\x20indexing\
    \x20multiple\x20fields.\n\n\n\n\x03\x04\x01\x01\x12\x03-\x08\x1e\n)\n\
    \x04\x04\x01\x02\0\x12\x03/\x02*\x1a\x1c\x20List\x20of\x20composite\x20i\
    ndexes.\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03/\x02\n\n\x0c\n\x05\x04\
    \x01\x02\0\x06\x12\x03/\x0b\x1f\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03/\
    \x20%\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03/()\nN\n\x02\x04\x02\x12\x043\
    \0:\x01\x1aB\x20Defines\x20options\x20for\x20composite\x20indexes\x20inv\
    olving\x20multiple\x20fields.\n\n\n\n\x03\x04\x02\x01\x12\x033\x08\x1c\n\
    <\n\x04\x04\x02\x02\0\x12\x035\x02\x15\x1a/\x20Type\x20of\x20composite\
    \x20index\x20(default\x20to\x20ordered).\n\n\x0c\n\x05\x04\x02\x02\0\x06\
    \x12\x035\x02\x0b\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x035\x0c\x10\n\x0c\n\
    \x05\x04\x02\x02\0\x03\x12\x035\x13\x14\nA\n\x04\x04\x02\x02\x01\x12\x03\
    7\x02\x12\x1a4\x20Whether\x20this\x20is\x20a\x20unique\x20index\x20(defa\
    ult\x20to\x20false).\n\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x037\x02\x06\
    \n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x037\x07\r\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x037\x10\x11\nC\n\x04\x04\x02\x02\x02\x12\x039\x02\x1d\x1a6\
    \x20List\x20of\x20field\x20names\x20involved\x20in\x20the\x20composite\
    \x20index.\n\n\x0c\n\x05\x04\x02\x02\x02\x04\x12\x039\x02\n\n\x0c\n\x05\
    \x04\x02\x02\x02\x05\x12\x039\x0b\x11\n\x0c\n\x05\x04\x02\x02\x02\x01\
    \x12\x039\x12\x18\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x039\x1b\x1c\nD\n\
    \x02\x05\x01\x12\x04=\0B\x01\x1a8\x20Specifies\x20the\x20format\x20for\
    \x20encoding/decoding\x20bytes\x20data.\n\n\n\n\x03\x05\x01\x01\x12\x03=\
    \x05\x0f\n(\n\x04\x05\x01\x02\0\x12\x03?\x02\x19\x1a\x1b\x20Standard\x20\
    base64\x20encoding.\n\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03?\x02\x14\n\
    \x0c\n\x05\x05\x01\x02\0\x02\x12\x03?\x17\x18\n$\n\x04\x05\x01\x02\x01\
    \x12\x03A\x02\x16\x1a\x17\x20Hexadecimal\x20encoding.\n\n\x0c\n\x05\x05\
    \x01\x02\x01\x01\x12\x03A\x02\x11\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\
    \x03A\x14\x15\nG\n\x02\x04\x03\x12\x04E\0H\x01\x1a;\x20Defines\x20option\
    s\x20for\x20how\x20bytes\x20fields\x20are\x20encoded/decoded.\n\n\n\n\
    \x03\x04\x03\x01\x12\x03E\x08\x13\nL\n\x04\x04\x03\x02\0\x12\x03G\x02\
    \x18\x1a?\x20Format\x20to\x20use\x20for\x20displaying\x20binary\x20data\
    \x20(default\x20to\x20base64).\n\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03G\
    \x02\x0c\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03G\r\x13\n\x0c\n\x05\x04\
    \x03\x02\0\x03\x12\x03G\x16\x17\nL\n\x02\x04\x04\x12\x04K\0P\x01\x1a@\
    \x20Defines\x20options\x20for\x20how\x20numeric\x20fields\x20are\x20scal\
    ed/represented.\n\n\n\n\x03\x04\x04\x01\x12\x03K\x08\x15\nG\n\x04\x04\
    \x04\x02\0\x12\x03M\x02\x20\x1a:\x20Total\x20number\x20of\x20significant\
    \x20digits\x20(including\x20decimals).\n\n\x0c\n\x05\x04\x04\x02\0\x04\
    \x12\x03M\x02\n\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03M\x0b\x11\n\x0c\n\
    \x05\x04\x04\x02\0\x01\x12\x03M\x12\x1b\n\x0c\n\x05\x04\x04\x02\0\x03\
    \x12\x03M\x1e\x1f\n9\n\x04\x04\x04\x02\x01\x12\x03O\x02\x1c\x1a,\x20Numb\
    er\x20of\x20decimal\x20places\x20(0\x20for\x20integers).\n\n\x0c\n\x05\
    \x04\x04\x02\x01\x04\x12\x03O\x02\n\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\
    \x03O\x0b\x11\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03O\x12\x17\n\x0c\n\
    \x05\x04\x04\x02\x01\x03\x12\x03O\x1a\x1b\nH\n\x02\x04\x05\x12\x04S\0d\
    \x01\x1a<\x20Defines\x20options\x20for\x20aggregating\x20data\x20from\
    \x20another\x20message.\n\n\n\n\x03\x04\x05\x01\x12\x03S\x08\x12\n-\n\
    \x04\x04\x05\x02\0\x12\x03U\x02\x13\x1a\x20\x20Topic\x20that\x20is\x20ag\
    gregated\x20from.\n\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03U\x02\x08\n\x0c\
    \n\x05\x04\x05\x02\0\x01\x12\x03U\t\x0e\n\x0c\n\x05\x04\x05\x02\0\x03\
    \x12\x03U\x11\x12\nF\n\x04\x04\x05\x02\x01\x12\x03W\x02\x18\x1a9\x20Whet\
    her\x20this\x20is\x20a\x20materialized\x20view\x20(default\x20to\x20fals\
    e).\n\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03W\x02\x06\n\x0c\n\x05\x04\
    \x05\x02\x01\x01\x12\x03W\x07\x13\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\
    \x03W\x16\x17\nI\n\x04\x04\x05\x02\x02\x12\x03Y\x02\x14\x1a<\x20Whether\
    \x20to\x20enable\x20realtime\x20aggregation\x20(default\x20to\x20false).\
    \n\n\x0c\n\x05\x04\x05\x02\x02\x05\x12\x03Y\x02\x06\n\x0c\n\x05\x04\x05\
    \x02\x02\x01\x12\x03Y\x07\x0f\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03Y\
    \x12\x13\n:\n\x04\x04\x05\x02\x03\x12\x03[\x02\x1e\x1a-\x20Time\x20inter\
    val\x20to\x20refresh\x20materialized\x20view.\n\n\x0c\n\x05\x04\x05\x02\
    \x03\x05\x12\x03[\x02\x08\n\x0c\n\x05\x04\x05\x02\x03\x01\x12\x03[\t\x19\
    \n\x0c\n\x05\x04\x05\x02\x03\x03\x12\x03[\x1c\x1d\n\x1c\n\x04\x04\x05\
    \x02\x04\x12\x03]\x02\x1e\x1a\x0f\x20View\x20options.\n\n\x0c\n\x05\x04\
    \x05\x02\x04\x04\x12\x03]\x02\n\n\x0c\n\x05\x04\x05\x02\x04\x05\x12\x03]\
    \x0b\x11\n\x0c\n\x05\x04\x05\x02\x04\x01\x12\x03]\x12\x19\n\x0c\n\x05\
    \x04\x05\x02\x04\x03\x12\x03]\x1c\x1d\n8\n\x04\x04\x05\x02\x05\x12\x03_\
    \x02\x1f\x1a+\x20List\x20of\x20field\x20names\x20used\x20for\x20aggregat\
    ion.\n\n\x0c\n\x05\x04\x05\x02\x05\x04\x12\x03_\x02\n\n\x0c\n\x05\x04\
    \x05\x02\x05\x05\x12\x03_\x0b\x11\n\x0c\n\x05\x04\x05\x02\x05\x01\x12\
    \x03_\x12\x1a\n\x0c\n\x05\x04\x05\x02\x05\x03\x12\x03_\x1d\x1e\n:\n\x04\
    \x04\x05\x02\x06\x12\x03a\x02\x13\x1a-\x20Where\x20condition\x20applied\
    \x20to\x20the\x20aggregation.\n\n\x0c\n\x05\x04\x05\x02\x06\x05\x12\x03a\
    \x02\x08\n\x0c\n\x05\x04\x05\x02\x06\x01\x12\x03a\t\x0e\n\x0c\n\x05\x04\
    \x05\x02\x06\x03\x12\x03a\x11\x12\n;\n\x04\x04\x05\x02\x07\x12\x03c\x02\
    \x14\x1a.\x20Having\x20condition\x20applied\x20to\x20the\x20aggregation.\
    \n\n\x0c\n\x05\x04\x05\x02\x07\x05\x12\x03c\x02\x08\n\x0c\n\x05\x04\x05\
    \x02\x07\x01\x12\x03c\t\x0f\n\x0c\n\x05\x04\x05\x02\x07\x03\x12\x03c\x12\
    \x13b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::descriptor::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(IndexOption::generated_message_descriptor_data());
            messages.push(CompositeIndexesOption::generated_message_descriptor_data());
            messages.push(CompositeIndexOption::generated_message_descriptor_data());
            messages.push(BytesOption::generated_message_descriptor_data());
            messages.push(NumericOption::generated_message_descriptor_data());
            messages.push(ViewOption::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(IndexType::generated_enum_descriptor_data());
            enums.push(FormatType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
