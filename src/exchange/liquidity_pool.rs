// This file is generated by rust-protobuf 3.5.0. Do not edit
// .proto file is parsed by protoc --rust_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `lotus/exchange/liquidity_pool.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_0;

// @@protoc_insertion_point(message:lotus.exchange.LiquidityPool)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LiquidityPool {
    // message fields
    // @@protoc_insertion_point(field:lotus.exchange.LiquidityPool.pool_id)
    pub pool_id: ::std::string::String,
    // @@protoc_insertion_point(field:lotus.exchange.LiquidityPool.token_addresses)
    pub token_addresses: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:lotus.exchange.LiquidityPool.token_reserves)
    pub token_reserves: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:lotus.exchange.LiquidityPool.lp_token_address)
    pub lp_token_address: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:lotus.exchange.LiquidityPool.lp_token_supply)
    pub lp_token_supply: ::std::string::String,
    // @@protoc_insertion_point(field:lotus.exchange.LiquidityPool.pool_fee)
    pub pool_fee: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:lotus.exchange.LiquidityPool.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LiquidityPool {
    fn default() -> &'a LiquidityPool {
        <LiquidityPool as ::protobuf::Message>::default_instance()
    }
}

impl LiquidityPool {
    pub fn new() -> LiquidityPool {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pool_id",
            |m: &LiquidityPool| { &m.pool_id },
            |m: &mut LiquidityPool| { &mut m.pool_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "token_addresses",
            |m: &LiquidityPool| { &m.token_addresses },
            |m: &mut LiquidityPool| { &mut m.token_addresses },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "token_reserves",
            |m: &LiquidityPool| { &m.token_reserves },
            |m: &mut LiquidityPool| { &mut m.token_reserves },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "lp_token_address",
            |m: &LiquidityPool| { &m.lp_token_address },
            |m: &mut LiquidityPool| { &mut m.lp_token_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "lp_token_supply",
            |m: &LiquidityPool| { &m.lp_token_supply },
            |m: &mut LiquidityPool| { &mut m.lp_token_supply },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pool_fee",
            |m: &LiquidityPool| { &m.pool_fee },
            |m: &mut LiquidityPool| { &mut m.pool_fee },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LiquidityPool>(
            "LiquidityPool",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LiquidityPool {
    const NAME: &'static str = "LiquidityPool";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.pool_id = is.read_string()?;
                },
                18 => {
                    self.token_addresses.push(is.read_bytes()?);
                },
                26 => {
                    self.token_reserves.push(is.read_bytes()?);
                },
                34 => {
                    self.lp_token_address = is.read_bytes()?;
                },
                42 => {
                    self.lp_token_supply = is.read_string()?;
                },
                50 => {
                    self.pool_fee = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.pool_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pool_id);
        }
        for value in &self.token_addresses {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        for value in &self.token_reserves {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        if !self.lp_token_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.lp_token_address);
        }
        if !self.lp_token_supply.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.lp_token_supply);
        }
        if !self.pool_fee.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.pool_fee);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.pool_id.is_empty() {
            os.write_string(1, &self.pool_id)?;
        }
        for v in &self.token_addresses {
            os.write_bytes(2, &v)?;
        };
        for v in &self.token_reserves {
            os.write_bytes(3, &v)?;
        };
        if !self.lp_token_address.is_empty() {
            os.write_bytes(4, &self.lp_token_address)?;
        }
        if !self.lp_token_supply.is_empty() {
            os.write_string(5, &self.lp_token_supply)?;
        }
        if !self.pool_fee.is_empty() {
            os.write_string(6, &self.pool_fee)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LiquidityPool {
        LiquidityPool::new()
    }

    fn clear(&mut self) {
        self.pool_id.clear();
        self.token_addresses.clear();
        self.token_reserves.clear();
        self.lp_token_address.clear();
        self.lp_token_supply.clear();
        self.pool_fee.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LiquidityPool {
        static instance: LiquidityPool = LiquidityPool {
            pool_id: ::std::string::String::new(),
            token_addresses: ::std::vec::Vec::new(),
            token_reserves: ::std::vec::Vec::new(),
            lp_token_address: ::std::vec::Vec::new(),
            lp_token_supply: ::std::string::String::new(),
            pool_fee: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LiquidityPool {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LiquidityPool").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LiquidityPool {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LiquidityPool {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#lotus/exchange/liquidity_pool.proto\x12\x0elotus.exchange\x1a\x11lotu\
    s/lotus.proto\"\x87\x02\n\rLiquidityPool\x12\x17\n\x07pool_id\x18\x01\
    \x20\x01(\tR\x06poolId\x12/\n\x0ftoken_addresses\x18\x02\x20\x03(\x0cR\
    \x0etokenAddressesB\x06\xd2\xab0\x02\x08\x01\x12+\n\x0etoken_reserves\
    \x18\x03\x20\x03(\x0cR\rtokenReservesB\x04\xda\xab0\0\x120\n\x10lp_token\
    _address\x18\x04\x20\x01(\x0cR\x0elpTokenAddressB\x06\xd2\xab0\x02\x08\
    \x01\x12,\n\x0flp_token_supply\x18\x05\x20\x01(\tR\rlpTokenSupplyB\x04\
    \xda\xab0\0\x12\x1f\n\x08pool_fee\x18\x06\x20\x01(\tR\x07poolFeeB\x04\
    \xda\xab0\0B-Z+github.com/trylotus/go-lotus-proto/exchangeJ\xd7\x04\n\
    \x06\x12\x04\0\0\x0f\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x02\0\x17\n\t\n\x02\x03\0\x12\x03\x04\0\x1b\n\x08\n\x01\x08\x12\
    \x03\x06\0B\n\t\n\x02\x08\x0b\x12\x03\x06\0B\n\n\n\x02\x04\0\x12\x04\x08\
    \0\x0f\x01\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x15\n\x0b\n\x04\x04\0\x02\
    \0\x12\x03\t\x02\x15\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\t\x02\x08\n\x0c\
    \n\x05\x04\0\x02\0\x01\x12\x03\t\t\x10\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\t\x13\x14\n\x0b\n\x04\x04\0\x02\x01\x12\x03\n\x02N\n\x0c\n\x05\x04\
    \0\x02\x01\x04\x12\x03\n\x02\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\n\
    \x0b\x10\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\n\x11\x20\n\x0c\n\x05\x04\
    \0\x02\x01\x03\x12\x03\n#$\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\n%M\n\
    \x10\n\t\x04\0\x02\x01\x08\xba\x85\x06\x01\x12\x03\n&L\n\x0b\n\x04\x04\0\
    \x02\x02\x12\x03\x0b\x02;\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x0b\x02\
    \n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0b\x0b\x10\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03\x0b\x11\x1f\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\
    \x0b\"#\n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x0b$:\n\x0f\n\x08\x04\0\
    \x02\x02\x08\xbb\x85\x06\x12\x03\x0b%9\n\x0b\n\x04\x04\0\x02\x03\x12\x03\
    \x0c\x02F\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x0c\x02\x07\n\x0c\n\x05\
    \x04\0\x02\x03\x01\x12\x03\x0c\x08\x18\n\x0c\n\x05\x04\0\x02\x03\x03\x12\
    \x03\x0c\x1b\x1c\n\x0c\n\x05\x04\0\x02\x03\x08\x12\x03\x0c\x1dE\n\x10\n\
    \t\x04\0\x02\x03\x08\xba\x85\x06\x01\x12\x03\x0c\x1eD\n\x0b\n\x04\x04\0\
    \x02\x04\x12\x03\r\x024\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\r\x02\x08\
    \n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\r\t\x18\n\x0c\n\x05\x04\0\x02\x04\
    \x03\x12\x03\r\x1b\x1c\n\x0c\n\x05\x04\0\x02\x04\x08\x12\x03\r\x1d3\n\
    \x0f\n\x08\x04\0\x02\x04\x08\xbb\x85\x06\x12\x03\r\x1e2\n\x0b\n\x04\x04\
    \0\x02\x05\x12\x03\x0e\x02-\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x0e\
    \x02\x08\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x0e\t\x11\n\x0c\n\x05\x04\
    \0\x02\x05\x03\x12\x03\x0e\x14\x15\n\x0c\n\x05\x04\0\x02\x05\x08\x12\x03\
    \x0e\x16,\n\x0f\n\x08\x04\0\x02\x05\x08\xbb\x85\x06\x12\x03\x0e\x17+b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::lotus::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(LiquidityPool::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
