// This file is generated by rust-protobuf 3.5.0. Do not edit
// .proto file is parsed by protoc --rust_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `lotus/exchange/order.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_0;

// @@protoc_insertion_point(message:lotus.exchange.Order)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Order {
    // message fields
    // @@protoc_insertion_point(field:lotus.exchange.Order.timestamp)
    pub timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:lotus.exchange.Order.maker_address)
    pub maker_address: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:lotus.exchange.Order.order_id)
    pub order_id: ::std::string::String,
    // @@protoc_insertion_point(field:lotus.exchange.Order.token_address)
    pub token_address: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:lotus.exchange.Order.amount)
    pub amount: ::std::string::String,
    // @@protoc_insertion_point(field:lotus.exchange.Order.price)
    pub price: ::std::string::String,
    // @@protoc_insertion_point(field:lotus.exchange.Order.order_type)
    pub order_type: ::protobuf::EnumOrUnknown<OrderType>,
    // @@protoc_insertion_point(field:lotus.exchange.Order.order_status)
    pub order_status: ::protobuf::EnumOrUnknown<OrderStatus>,
    // special fields
    // @@protoc_insertion_point(special_field:lotus.exchange.Order.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Order {
    fn default() -> &'a Order {
        <Order as ::protobuf::Message>::default_instance()
    }
}

impl Order {
    pub fn new() -> Order {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "timestamp",
            |m: &Order| { &m.timestamp },
            |m: &mut Order| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "maker_address",
            |m: &Order| { &m.maker_address },
            |m: &mut Order| { &mut m.maker_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "order_id",
            |m: &Order| { &m.order_id },
            |m: &mut Order| { &mut m.order_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token_address",
            |m: &Order| { &m.token_address },
            |m: &mut Order| { &mut m.token_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount",
            |m: &Order| { &m.amount },
            |m: &mut Order| { &mut m.amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "price",
            |m: &Order| { &m.price },
            |m: &mut Order| { &mut m.price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "order_type",
            |m: &Order| { &m.order_type },
            |m: &mut Order| { &mut m.order_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "order_status",
            |m: &Order| { &m.order_status },
            |m: &mut Order| { &mut m.order_status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Order>(
            "Order",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Order {
    const NAME: &'static str = "Order";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                18 => {
                    self.maker_address = is.read_bytes()?;
                },
                26 => {
                    self.order_id = is.read_string()?;
                },
                34 => {
                    self.token_address = is.read_bytes()?;
                },
                42 => {
                    self.amount = is.read_string()?;
                },
                50 => {
                    self.price = is.read_string()?;
                },
                56 => {
                    self.order_type = is.read_enum_or_unknown()?;
                },
                64 => {
                    self.order_status = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.maker_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.maker_address);
        }
        if !self.order_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.order_id);
        }
        if !self.token_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.token_address);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.amount);
        }
        if !self.price.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.price);
        }
        if self.order_type != ::protobuf::EnumOrUnknown::new(OrderType::ORDER_TYPE_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(7, self.order_type.value());
        }
        if self.order_status != ::protobuf::EnumOrUnknown::new(OrderStatus::ORDER_STATUS_UNSPECIFIED) {
            my_size += ::protobuf::rt::int32_size(8, self.order_status.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.maker_address.is_empty() {
            os.write_bytes(2, &self.maker_address)?;
        }
        if !self.order_id.is_empty() {
            os.write_string(3, &self.order_id)?;
        }
        if !self.token_address.is_empty() {
            os.write_bytes(4, &self.token_address)?;
        }
        if !self.amount.is_empty() {
            os.write_string(5, &self.amount)?;
        }
        if !self.price.is_empty() {
            os.write_string(6, &self.price)?;
        }
        if self.order_type != ::protobuf::EnumOrUnknown::new(OrderType::ORDER_TYPE_UNSPECIFIED) {
            os.write_enum(7, ::protobuf::EnumOrUnknown::value(&self.order_type))?;
        }
        if self.order_status != ::protobuf::EnumOrUnknown::new(OrderStatus::ORDER_STATUS_UNSPECIFIED) {
            os.write_enum(8, ::protobuf::EnumOrUnknown::value(&self.order_status))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Order {
        Order::new()
    }

    fn clear(&mut self) {
        self.timestamp.clear();
        self.maker_address.clear();
        self.order_id.clear();
        self.token_address.clear();
        self.amount.clear();
        self.price.clear();
        self.order_type = ::protobuf::EnumOrUnknown::new(OrderType::ORDER_TYPE_UNSPECIFIED);
        self.order_status = ::protobuf::EnumOrUnknown::new(OrderStatus::ORDER_STATUS_UNSPECIFIED);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Order {
        static instance: Order = Order {
            timestamp: ::protobuf::MessageField::none(),
            maker_address: ::std::vec::Vec::new(),
            order_id: ::std::string::String::new(),
            token_address: ::std::vec::Vec::new(),
            amount: ::std::string::String::new(),
            price: ::std::string::String::new(),
            order_type: ::protobuf::EnumOrUnknown::from_i32(0),
            order_status: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Order {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Order").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Order {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Order {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:lotus.exchange.OrderType)
pub enum OrderType {
    // @@protoc_insertion_point(enum_value:lotus.exchange.OrderType.ORDER_TYPE_UNSPECIFIED)
    ORDER_TYPE_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:lotus.exchange.OrderType.ORDER_TYPE_LIMIT)
    ORDER_TYPE_LIMIT = 1,
    // @@protoc_insertion_point(enum_value:lotus.exchange.OrderType.ORDER_TYPE_MARKET)
    ORDER_TYPE_MARKET = 2,
}

impl ::protobuf::Enum for OrderType {
    const NAME: &'static str = "OrderType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OrderType> {
        match value {
            0 => ::std::option::Option::Some(OrderType::ORDER_TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(OrderType::ORDER_TYPE_LIMIT),
            2 => ::std::option::Option::Some(OrderType::ORDER_TYPE_MARKET),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<OrderType> {
        match str {
            "ORDER_TYPE_UNSPECIFIED" => ::std::option::Option::Some(OrderType::ORDER_TYPE_UNSPECIFIED),
            "ORDER_TYPE_LIMIT" => ::std::option::Option::Some(OrderType::ORDER_TYPE_LIMIT),
            "ORDER_TYPE_MARKET" => ::std::option::Option::Some(OrderType::ORDER_TYPE_MARKET),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [OrderType] = &[
        OrderType::ORDER_TYPE_UNSPECIFIED,
        OrderType::ORDER_TYPE_LIMIT,
        OrderType::ORDER_TYPE_MARKET,
    ];
}

impl ::protobuf::EnumFull for OrderType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("OrderType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for OrderType {
    fn default() -> Self {
        OrderType::ORDER_TYPE_UNSPECIFIED
    }
}

impl OrderType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<OrderType>("OrderType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:lotus.exchange.OrderStatus)
pub enum OrderStatus {
    // @@protoc_insertion_point(enum_value:lotus.exchange.OrderStatus.ORDER_STATUS_UNSPECIFIED)
    ORDER_STATUS_UNSPECIFIED = 0,
    // @@protoc_insertion_point(enum_value:lotus.exchange.OrderStatus.ORDER_STATUS_OPEN)
    ORDER_STATUS_OPEN = 1,
    // @@protoc_insertion_point(enum_value:lotus.exchange.OrderStatus.ORDER_STATUS_FILLED)
    ORDER_STATUS_FILLED = 2,
    // @@protoc_insertion_point(enum_value:lotus.exchange.OrderStatus.ORDER_STATUS_CANCELLED)
    ORDER_STATUS_CANCELLED = 3,
}

impl ::protobuf::Enum for OrderStatus {
    const NAME: &'static str = "OrderStatus";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OrderStatus> {
        match value {
            0 => ::std::option::Option::Some(OrderStatus::ORDER_STATUS_UNSPECIFIED),
            1 => ::std::option::Option::Some(OrderStatus::ORDER_STATUS_OPEN),
            2 => ::std::option::Option::Some(OrderStatus::ORDER_STATUS_FILLED),
            3 => ::std::option::Option::Some(OrderStatus::ORDER_STATUS_CANCELLED),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<OrderStatus> {
        match str {
            "ORDER_STATUS_UNSPECIFIED" => ::std::option::Option::Some(OrderStatus::ORDER_STATUS_UNSPECIFIED),
            "ORDER_STATUS_OPEN" => ::std::option::Option::Some(OrderStatus::ORDER_STATUS_OPEN),
            "ORDER_STATUS_FILLED" => ::std::option::Option::Some(OrderStatus::ORDER_STATUS_FILLED),
            "ORDER_STATUS_CANCELLED" => ::std::option::Option::Some(OrderStatus::ORDER_STATUS_CANCELLED),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [OrderStatus] = &[
        OrderStatus::ORDER_STATUS_UNSPECIFIED,
        OrderStatus::ORDER_STATUS_OPEN,
        OrderStatus::ORDER_STATUS_FILLED,
        OrderStatus::ORDER_STATUS_CANCELLED,
    ];
}

impl ::protobuf::EnumFull for OrderStatus {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("OrderStatus").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for OrderStatus {
    fn default() -> Self {
        OrderStatus::ORDER_STATUS_UNSPECIFIED
    }
}

impl OrderStatus {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<OrderStatus>("OrderStatus")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1alotus/exchange/order.proto\x12\x0elotus.exchange\x1a\x1fgoogle/pro\
    tobuf/timestamp.proto\x1a\x11lotus/lotus.proto\"\xea\x02\n\x05Order\x128\
    \n\ttimestamp\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\ttime\
    stamp\x12+\n\rmaker_address\x18\x02\x20\x01(\x0cR\x0cmakerAddressB\x06\
    \xd2\xab0\x02\x08\x01\x12\x19\n\x08order_id\x18\x03\x20\x01(\tR\x07order\
    Id\x12+\n\rtoken_address\x18\x04\x20\x01(\x0cR\x0ctokenAddressB\x06\xd2\
    \xab0\x02\x08\x01\x12\x1c\n\x06amount\x18\x05\x20\x01(\tR\x06amountB\x04\
    \xda\xab0\0\x12\x1a\n\x05price\x18\x06\x20\x01(\tR\x05priceB\x04\xda\xab\
    0\0\x128\n\norder_type\x18\x07\x20\x01(\x0e2\x19.lotus.exchange.OrderTyp\
    eR\torderType\x12>\n\x0corder_status\x18\x08\x20\x01(\x0e2\x1b.lotus.exc\
    hange.OrderStatusR\x0borderStatus*T\n\tOrderType\x12\x1a\n\x16ORDER_TYPE\
    _UNSPECIFIED\x10\0\x12\x14\n\x10ORDER_TYPE_LIMIT\x10\x01\x12\x15\n\x11OR\
    DER_TYPE_MARKET\x10\x02*w\n\x0bOrderStatus\x12\x1c\n\x18ORDER_STATUS_UNS\
    PECIFIED\x10\0\x12\x15\n\x11ORDER_STATUS_OPEN\x10\x01\x12\x17\n\x13ORDER\
    _STATUS_FILLED\x10\x02\x12\x1a\n\x16ORDER_STATUS_CANCELLED\x10\x03B-Z+gi\
    thub.com/trylotus/go-lotus-proto/exchangeJ\xe4\x07\n\x06\x12\x04\0\0\x1f\
    \x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x17\n\
    \t\n\x02\x03\0\x12\x03\x04\0)\n\t\n\x02\x03\x01\x12\x03\x05\0\x1b\n\x08\
    \n\x01\x08\x12\x03\x07\0B\n\t\n\x02\x08\x0b\x12\x03\x07\0B\n\n\n\x02\x05\
    \0\x12\x04\t\0\r\x01\n\n\n\x03\x05\0\x01\x12\x03\t\x05\x0e\n\x0b\n\x04\
    \x05\0\x02\0\x12\x03\n\x02\x1d\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\n\x02\
    \x18\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\n\x1b\x1c\n\x0b\n\x04\x05\0\x02\
    \x01\x12\x03\x0b\x02\x17\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x0b\x02\
    \x12\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x0b\x15\x16\n\x0b\n\x04\x05\0\
    \x02\x02\x12\x03\x0c\x02\x18\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x0c\
    \x02\x13\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x0c\x16\x17\n\n\n\x02\x05\
    \x01\x12\x04\x0f\0\x14\x01\n\n\n\x03\x05\x01\x01\x12\x03\x0f\x05\x10\n\
    \x0b\n\x04\x05\x01\x02\0\x12\x03\x10\x02\x1f\n\x0c\n\x05\x05\x01\x02\0\
    \x01\x12\x03\x10\x02\x1a\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03\x10\x1d\
    \x1e\n\x0b\n\x04\x05\x01\x02\x01\x12\x03\x11\x02\x18\n\x0c\n\x05\x05\x01\
    \x02\x01\x01\x12\x03\x11\x02\x13\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\x03\
    \x11\x16\x17\n\x0b\n\x04\x05\x01\x02\x02\x12\x03\x12\x02\x1a\n\x0c\n\x05\
    \x05\x01\x02\x02\x01\x12\x03\x12\x02\x15\n\x0c\n\x05\x05\x01\x02\x02\x02\
    \x12\x03\x12\x18\x19\n\x0b\n\x04\x05\x01\x02\x03\x12\x03\x13\x02\x1d\n\
    \x0c\n\x05\x05\x01\x02\x03\x01\x12\x03\x13\x02\x18\n\x0c\n\x05\x05\x01\
    \x02\x03\x02\x12\x03\x13\x1b\x1c\n\n\n\x02\x04\0\x12\x04\x16\0\x1f\x01\n\
    \n\n\x03\x04\0\x01\x12\x03\x16\x08\r\n\x0b\n\x04\x04\0\x02\0\x12\x03\x17\
    \x02*\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x17\x02\x1b\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\x17\x1c%\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x17()\n\
    \x0b\n\x04\x04\0\x02\x01\x12\x03\x18\x02C\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03\x18\x02\x07\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x18\x08\x15\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x18\x18\x19\n\x0c\n\x05\x04\0\x02\
    \x01\x08\x12\x03\x18\x1aB\n\x10\n\t\x04\0\x02\x01\x08\xba\x85\x06\x01\
    \x12\x03\x18\x1bA\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x19\x02\x16\n\x0c\n\
    \x05\x04\0\x02\x02\x05\x12\x03\x19\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\x19\t\x11\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x19\x14\x15\n\
    \x0b\n\x04\x04\0\x02\x03\x12\x03\x1a\x02C\n\x0c\n\x05\x04\0\x02\x03\x05\
    \x12\x03\x1a\x02\x07\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x1a\x08\x15\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x1a\x18\x19\n\x0c\n\x05\x04\0\x02\
    \x03\x08\x12\x03\x1a\x1aB\n\x10\n\t\x04\0\x02\x03\x08\xba\x85\x06\x01\
    \x12\x03\x1a\x1bA\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x1b\x02+\n\x0c\n\x05\
    \x04\0\x02\x04\x05\x12\x03\x1b\x02\x08\n\x0c\n\x05\x04\0\x02\x04\x01\x12\
    \x03\x1b\t\x0f\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x1b\x12\x13\n\x0c\n\
    \x05\x04\0\x02\x04\x08\x12\x03\x1b\x14*\n\x0f\n\x08\x04\0\x02\x04\x08\
    \xbb\x85\x06\x12\x03\x1b\x15)\n\x0b\n\x04\x04\0\x02\x05\x12\x03\x1c\x02*\
    \n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x1c\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x05\x01\x12\x03\x1c\t\x0e\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x1c\x11\
    \x12\n\x0c\n\x05\x04\0\x02\x05\x08\x12\x03\x1c\x13)\n\x0f\n\x08\x04\0\
    \x02\x05\x08\xbb\x85\x06\x12\x03\x1c\x14(\n\x0b\n\x04\x04\0\x02\x06\x12\
    \x03\x1d\x02\x1b\n\x0c\n\x05\x04\0\x02\x06\x06\x12\x03\x1d\x02\x0b\n\x0c\
    \n\x05\x04\0\x02\x06\x01\x12\x03\x1d\x0c\x16\n\x0c\n\x05\x04\0\x02\x06\
    \x03\x12\x03\x1d\x19\x1a\n\x0b\n\x04\x04\0\x02\x07\x12\x03\x1e\x02\x1f\n\
    \x0c\n\x05\x04\0\x02\x07\x06\x12\x03\x1e\x02\r\n\x0c\n\x05\x04\0\x02\x07\
    \x01\x12\x03\x1e\x0e\x1a\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x1e\x1d\
    \x1eb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(super::lotus::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Order::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(OrderType::generated_enum_descriptor_data());
            enums.push(OrderStatus::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
