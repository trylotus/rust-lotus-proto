// This file is generated by rust-protobuf 3.5.0. Do not edit
// .proto file is parsed by protoc --rust_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `lotus/example/example.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_0;

// @@protoc_insertion_point(message:lotus.example.Example)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Example {
    // message fields
    // @@protoc_insertion_point(field:lotus.example.Example.id)
    pub id: u32,
    // @@protoc_insertion_point(field:lotus.example.Example.email)
    pub email: ::std::string::String,
    // @@protoc_insertion_point(field:lotus.example.Example.hash)
    pub hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:lotus.example.Example.serial)
    pub serial: ::std::string::String,
    // @@protoc_insertion_point(field:lotus.example.Example.big_int)
    pub big_int: ::std::string::String,
    // @@protoc_insertion_point(field:lotus.example.Example.big_dec)
    pub big_dec: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:lotus.example.Example.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Example {
    fn default() -> &'a Example {
        <Example as ::protobuf::Message>::default_instance()
    }
}

impl Example {
    pub fn new() -> Example {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Example| { &m.id },
            |m: &mut Example| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "email",
            |m: &Example| { &m.email },
            |m: &mut Example| { &mut m.email },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &Example| { &m.hash },
            |m: &mut Example| { &mut m.hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "serial",
            |m: &Example| { &m.serial },
            |m: &mut Example| { &mut m.serial },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "big_int",
            |m: &Example| { &m.big_int },
            |m: &mut Example| { &mut m.big_int },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "big_dec",
            |m: &Example| { &m.big_dec },
            |m: &mut Example| { &mut m.big_dec },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Example>(
            "Example",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Example {
    const NAME: &'static str = "Example";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint32()?;
                },
                18 => {
                    self.email = is.read_string()?;
                },
                26 => {
                    self.hash = is.read_bytes()?;
                },
                34 => {
                    self.serial = is.read_string()?;
                },
                42 => {
                    self.big_int = is.read_string()?;
                },
                50 => {
                    self.big_dec = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.id);
        }
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.email);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.hash);
        }
        if !self.serial.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.serial);
        }
        if !self.big_int.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.big_int);
        }
        if !self.big_dec.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.big_dec);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if !self.email.is_empty() {
            os.write_string(2, &self.email)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(3, &self.hash)?;
        }
        if !self.serial.is_empty() {
            os.write_string(4, &self.serial)?;
        }
        if !self.big_int.is_empty() {
            os.write_string(5, &self.big_int)?;
        }
        if !self.big_dec.is_empty() {
            os.write_string(6, &self.big_dec)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Example {
        Example::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.email.clear();
        self.hash.clear();
        self.serial.clear();
        self.big_int.clear();
        self.big_dec.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Example {
        static instance: Example = Example {
            id: 0,
            email: ::std::string::String::new(),
            hash: ::std::vec::Vec::new(),
            serial: ::std::string::String::new(),
            big_int: ::std::string::String::new(),
            big_dec: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Example {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Example").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Example {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Example {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1blotus/example/example.proto\x12\rlotus.example\x1a\x11lotus/lotus.\
    proto\"\xe8\x01\n\x07Example\x12\x16\n\x02id\x18\x01\x20\x01(\rR\x02idB\
    \x06\xca\xab0\x02\x10\x01\x12\x1e\n\x05email\x18\x02\x20\x01(\tR\x05emai\
    lB\x08\xca\xab0\x04\x08\x01\x10\x01\x12\x1a\n\x04hash\x18\x03\x20\x01(\
    \x0cR\x04hashB\x06\xd2\xab0\x02\x08\x01\x12\x1e\n\x06serial\x18\x04\x20\
    \x01(\tR\x06serialB\x06\xda\xab0\x02\x08N\x12\x20\n\x07big_int\x18\x05\
    \x20\x01(\tR\x06bigIntB\x07\xda\xab0\x03\x08\xe8\x07\x12\x1d\n\x07big_de\
    c\x18\x06\x20\x01(\tR\x06bigDecB\x04\xda\xab0\0:(\xca\xab0$\n\x0e\x1a\
    \x04hash\x1a\x06serial\n\x12\x1a\x07big_int\x1a\x07big_decB,Z*github.com\
    /trylotus/go-lotus-proto/exampleJ\xcd\x06\n\x06\x12\x04\0\0#\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x16\n\t\n\x02\x03\
    \0\x12\x03\x04\0\x1b\n\x08\n\x01\x08\x12\x03\x06\0A\n\t\n\x02\x08\x0b\
    \x12\x03\x06\0A\n\n\n\x02\x04\0\x12\x04\x08\0#\x01\n\n\n\x03\x04\0\x01\
    \x12\x03\x08\x08\x0f\n\x0b\n\x03\x04\0\x07\x12\x04\t\x02\x18\x04\n\x0e\n\
    \x06\x04\0\x07\xb9\x85\x06\x12\x04\t\x02\x18\x04\n\x10\n\x08\x04\0\x07\
    \xb9\x85\x06\x01\0\x12\x04\x0b\x06\x10\x07\n\x11\n\n\x04\0\x07\xb9\x85\
    \x06\x01\0\x03\0\x12\x03\r\n\x10\n\x11\n\n\x04\0\x07\xb9\x85\x06\x01\0\
    \x03\x01\x12\x03\x0e\n\x12\n\x10\n\x08\x04\0\x07\xb9\x85\x06\x01\x01\x12\
    \x04\x11\x06\x16\x07\n\x11\n\n\x04\0\x07\xb9\x85\x06\x01\x01\x03\0\x12\
    \x03\x13\n\x13\n\x11\n\n\x04\0\x07\xb9\x85\x06\x01\x01\x03\x01\x12\x03\
    \x14\n\x13\n\x0b\n\x04\x04\0\x02\0\x12\x03\x1a\x021\n\x0c\n\x05\x04\0\
    \x02\0\x05\x12\x03\x1a\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1a\t\
    \x0b\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x1a\x0e\x0f\n\x0c\n\x05\x04\0\
    \x02\0\x08\x12\x03\x1a\x100\n\x0f\n\x08\x04\0\x02\0\x08\xb9\x85\x06\x12\
    \x03\x1a\x11/\n\x10\n\t\x04\0\x02\0\x08\xb9\x85\x06\x02\x12\x03\x1a\".\n\
    \x0c\n\x04\x04\0\x02\x01\x12\x04\x1b\x02\x1e\x05\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\x1b\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x1b\t\
    \x0e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x1b\x11\x12\n\r\n\x05\x04\0\
    \x02\x01\x08\x12\x04\x1b\x13\x1e\x04\n\x10\n\x08\x04\0\x02\x01\x08\xb9\
    \x85\x06\x12\x04\x1b\x14\x1e\x03\n\x10\n\t\x04\0\x02\x01\x08\xb9\x85\x06\
    \x02\x12\x03\x1c\x04\x10\n\x10\n\t\x04\0\x02\x01\x08\xb9\x85\x06\x01\x12\
    \x03\x1d\x04\x1e\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x1f\x02:\n\x0c\n\x05\
    \x04\0\x02\x02\x05\x12\x03\x1f\x02\x07\n\x0c\n\x05\x04\0\x02\x02\x01\x12\
    \x03\x1f\x08\x0c\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x1f\x0f\x10\n\x0c\
    \n\x05\x04\0\x02\x02\x08\x12\x03\x1f\x119\n\x10\n\t\x04\0\x02\x02\x08\
    \xba\x85\x06\x01\x12\x03\x1f\x128\n\x15\n\x04\x04\0\x02\x03\x12\x03\x20\
    \x028\"\x08\x20int256\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x20\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x20\t\x0f\n\x0c\n\x05\x04\0\
    \x02\x03\x03\x12\x03\x20\x12\x13\n\x0c\n\x05\x04\0\x02\x03\x08\x12\x03\
    \x20\x147\n\x0f\n\x08\x04\0\x02\x03\x08\xbb\x85\x06\x12\x03\x20\x156\n\
    \x10\n\t\x04\0\x02\x03\x08\xbb\x85\x06\x01\x12\x03\x20(5\n\x0b\n\x04\x04\
    \0\x02\x04\x12\x03!\x02;\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03!\x02\x08\
    \n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03!\t\x10\n\x0c\n\x05\x04\0\x02\x04\
    \x03\x12\x03!\x13\x14\n\x0c\n\x05\x04\0\x02\x04\x08\x12\x03!\x15:\n\x0f\
    \n\x08\x04\0\x02\x04\x08\xbb\x85\x06\x12\x03!\x169\n\x10\n\t\x04\0\x02\
    \x04\x08\xbb\x85\x06\x01\x12\x03!)8\n\x0b\n\x04\x04\0\x02\x05\x12\x03\"\
    \x02,\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\"\x02\x08\n\x0c\n\x05\x04\0\
    \x02\x05\x01\x12\x03\"\t\x10\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\"\x13\
    \x14\n\x0c\n\x05\x04\0\x02\x05\x08\x12\x03\"\x15+\n\x0f\n\x08\x04\0\x02\
    \x05\x08\xbb\x85\x06\x12\x03\"\x16*b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::lotus::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Example::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
