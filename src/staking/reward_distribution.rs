// This file is generated by rust-protobuf 3.5.0. Do not edit
// .proto file is parsed by protoc --rust_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `lotus/staking/reward_distribution.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_5_0;

// @@protoc_insertion_point(message:lotus.staking.RewardDistribution)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct RewardDistribution {
    // message fields
    // @@protoc_insertion_point(field:lotus.staking.RewardDistribution.timestamp)
    pub timestamp: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:lotus.staking.RewardDistribution.distribution_id)
    pub distribution_id: ::std::string::String,
    // @@protoc_insertion_point(field:lotus.staking.RewardDistribution.recipient_addresses)
    pub recipient_addresses: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:lotus.staking.RewardDistribution.reward_amounts)
    pub reward_amounts: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:lotus.staking.RewardDistribution.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RewardDistribution {
    fn default() -> &'a RewardDistribution {
        <RewardDistribution as ::protobuf::Message>::default_instance()
    }
}

impl RewardDistribution {
    pub fn new() -> RewardDistribution {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "timestamp",
            |m: &RewardDistribution| { &m.timestamp },
            |m: &mut RewardDistribution| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "distribution_id",
            |m: &RewardDistribution| { &m.distribution_id },
            |m: &mut RewardDistribution| { &mut m.distribution_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "recipient_addresses",
            |m: &RewardDistribution| { &m.recipient_addresses },
            |m: &mut RewardDistribution| { &mut m.recipient_addresses },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "reward_amounts",
            |m: &RewardDistribution| { &m.reward_amounts },
            |m: &mut RewardDistribution| { &mut m.reward_amounts },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RewardDistribution>(
            "RewardDistribution",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RewardDistribution {
    const NAME: &'static str = "RewardDistribution";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.timestamp)?;
                },
                18 => {
                    self.distribution_id = is.read_string()?;
                },
                26 => {
                    self.recipient_addresses.push(is.read_bytes()?);
                },
                34 => {
                    self.reward_amounts.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.distribution_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.distribution_id);
        }
        for value in &self.recipient_addresses {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        for value in &self.reward_amounts {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.timestamp.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.distribution_id.is_empty() {
            os.write_string(2, &self.distribution_id)?;
        }
        for v in &self.recipient_addresses {
            os.write_bytes(3, &v)?;
        };
        for v in &self.reward_amounts {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RewardDistribution {
        RewardDistribution::new()
    }

    fn clear(&mut self) {
        self.timestamp.clear();
        self.distribution_id.clear();
        self.recipient_addresses.clear();
        self.reward_amounts.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RewardDistribution {
        static instance: RewardDistribution = RewardDistribution {
            timestamp: ::protobuf::MessageField::none(),
            distribution_id: ::std::string::String::new(),
            recipient_addresses: ::std::vec::Vec::new(),
            reward_amounts: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RewardDistribution {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RewardDistribution").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RewardDistribution {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RewardDistribution {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'lotus/staking/reward_distribution.proto\x12\rlotus.staking\x1a\x1fgoo\
    gle/protobuf/timestamp.proto\x1a\x11lotus/lotus.proto\"\xdd\x01\n\x12Rew\
    ardDistribution\x128\n\ttimestamp\x18\x01\x20\x01(\x0b2\x1a.google.proto\
    buf.TimestampR\ttimestamp\x12'\n\x0fdistribution_id\x18\x02\x20\x01(\tR\
    \x0edistributionId\x127\n\x13recipient_addresses\x18\x03\x20\x03(\x0cR\
    \x12recipientAddressesB\x06\xd2\xab0\x02\x08\x01\x12+\n\x0ereward_amount\
    s\x18\x04\x20\x03(\tR\rrewardAmountsB\x04\xda\xab0\0B,Z*github.com/trylo\
    tus/go-lotus-proto/stakingJ\x96\x03\n\x06\x12\x04\0\0\x0e\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x16\n\t\n\x02\x03\
    \0\x12\x03\x04\0)\n\t\n\x02\x03\x01\x12\x03\x05\0\x1b\n\x08\n\x01\x08\
    \x12\x03\x07\0A\n\t\n\x02\x08\x0b\x12\x03\x07\0A\n\n\n\x02\x04\0\x12\x04\
    \t\0\x0e\x01\n\n\n\x03\x04\0\x01\x12\x03\t\x08\x1a\n\x0b\n\x04\x04\0\x02\
    \0\x12\x03\n\x02*\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\n\x02\x1b\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\n\x1c%\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \n()\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x0b\x02\x1d\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\x0b\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0b\t\
    \x18\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0b\x1b\x1c\n\x0b\n\x04\x04\0\
    \x02\x02\x12\x03\x0c\x02R\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x0c\x02\
    \n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0c\x0b\x10\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03\x0c\x11$\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0c'\
    (\n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x0c)Q\n\x10\n\t\x04\0\x02\x02\
    \x08\xba\x85\x06\x01\x12\x03\x0c*P\n\x0b\n\x04\x04\0\x02\x03\x12\x03\r\
    \x02<\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\r\x02\n\n\x0c\n\x05\x04\0\
    \x02\x03\x05\x12\x03\r\x0b\x11\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\r\
    \x12\x20\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\r#$\n\x0c\n\x05\x04\0\x02\
    \x03\x08\x12\x03\r%;\n\x0f\n\x08\x04\0\x02\x03\x08\xbb\x85\x06\x12\x03\r\
    &:b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            deps.push(super::lotus::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(RewardDistribution::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
